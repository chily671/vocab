"use client";

import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Info } from "lucide-react";

export default function AddWordPopup({ onWordAdded }) {
  const [word, setWord] = useState("");
  const [meaning, setMeaning] = useState("");
  const [example, setExample] = useState("");
  const [pronunciation, setPronunciation] = useState("");
  const [topic, setTopic] = useState("");
  const [topics, setTopics] = useState([]);
  const [open, setOpen] = useState(false);

  useEffect(() => {
    // Fake API: G·ªçi API l·∫•y danh s√°ch topic
    async function fetchTopics() {
      const res = await fetch("/api/topics", {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      const data = await res.json();
      console.log("üöÄ ~ fetchTopics ~ data:", data);
      setTopics(data?.data); // v√≠ d·ª• [{ name: "Business" }, ...]
    }

    if (open) fetchTopics();
  }, [open]);

  async function handleSubmit(e) {
    e.preventDefault();

    if (topics.includes(topic.trim())) {
      // n·∫øu topic ƒë√£ t·ªìn t·∫°i th√¨ kh√¥ng th√™m m·ªõi
      alert("Ch·ªß ƒë·ªÅ n√†y ƒë√£ t·ªìn t·∫°i r·ªìi. Vui l√≤ng ch·ªçn ho·∫∑c ƒë·∫∑t t√™n kh√°c.");
      return;
    }

    const res = await fetch("/api/words", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify({ word, meaning, example, pronunciation, topic }),
    });

    if (res.ok) {
      onWordAdded();
      setOpen(false);
      setWord("");
      setMeaning("");
      setExample("");
      setPronunciation("");
      setTopic("");
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>+ Th√™m t·ª´ m·ªõi</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogTitle>Th√™m t·ª´ v·ª±ng</DialogTitle>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="flex flex-col">
            <label className="font-bold">T·ª´ v·ª±ng</label>
            <Input
              value={word}
              onChange={(e) => setWord(e.target.value)}
              placeholder="T·ª´ v·ª±ng"
              required
            />
          </div>

          <div className="flex flex-col">
            <label className="font-bold">Nghƒ©a</label>
            <Input
              value={meaning}
              onChange={(e) => setMeaning(e.target.value)}
              placeholder="Nghƒ©a"
              required
            />
          </div>

          <div className="flex flex-col">
            <label className="font-bold">V√≠ d·ª•</label>
            <Input
              value={example}
              onChange={(e) => setExample(e.target.value)}
              placeholder="V√≠ d·ª•"
            />
          </div>

          <div className="flex flex-col">
            <label className="font-bold">Ph√°t √¢m</label>
            <Input
              value={pronunciation}
              onChange={(e) => setPronunciation(e.target.value)}
              placeholder="Ph√°t √¢m"
            />
          </div>

          <div className="flex flex-col">
            <div className="flex items-center justify-between">
              <label htmlFor="topic" className="font-bold">
                Ch·ªß ƒë·ªÅ
              </label>
              {/* <Popover>
                <PopoverTrigger asChild>
                  <Info className="w-4 h-4 text-gray-500 cursor-pointer" />
                </PopoverTrigger>
                <PopoverContent className="text-sm w-60">
                  H√£y ch·ªçn m·ªôt ch·ªß ƒë·ªÅ c√≥ s·∫µn ho·∫∑c nh·∫≠p t√™n m·ªõi n·∫øu mu·ªën th√™m.
                  Ch·ªß ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi c√°i c≈©.
                </PopoverContent>
              </Popover> */}
            </div>

            <Input
              list="topics"
              placeholder="Nh·∫≠p ho·∫∑c ch·ªçn ch·ªß ƒë·ªÅ"
              value={topic}
              onChange={(e) => setTopic(e.target.value)}
              required
            />
            <datalist id="topics">
              {topics.map((t, i) => (
                <option key={i} value={t?.topic} />
              ))}
            </datalist>
          </div>

          <Button type="submit" className="w-full">
            L∆∞u
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}
